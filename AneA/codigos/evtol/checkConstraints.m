% Auxiliary function to check constraints
function violations = checkConstraints(time, state, control, params)
    % Initialize violations structure
    violations = struct();
    violations.state = struct();
    violations.control = struct();
    violations.physical = struct();

    % Check state bounds
    if any(state(1, :) > 1000 | state(1, :) < 0)
        violations.state.sx = struct( ...
                                     'max', max(state(1, :)), ...
                                     'min', min(state(1, :)), ...
                                     'bounds', [0, 1000], ...
                                     'numViolations', sum(state(1, :) > 1000 | state(1, :) < 0));
    end
    if any(state(2, :) > 110 | state(2, :) < -10)
        violations.state.sy = struct( ...
                                     'max', max(state(2, :)), ...
                                     'min', min(state(2, :)), ...
                                     'bounds', [-10, 110], ...
                                     'numViolations', sum(state(2, :) > 110 | state(2, :) < -10));
    end
    if any(state(3, :) > 35 | state(3, :) < 0)
        violations.state.vx = struct( ...
                                     'max', max(state(3, :)), ...
                                     'min', min(state(3, :)), ...
                                     'bounds', [0, 35], ...
                                     'numViolations', sum(state(3, :) > 35 | state(3, :) < 0));
    end
    if any(state(4, :) > 6 | state(4, :) < -5)
        violations.state.vy = struct( ...
                                     'max', max(state(4, :)), ...
                                     'min', min(state(4, :)), ...
                                     'bounds', [-5, 6], ...
                                     'numViolations', sum(state(4, :) > 6 | state(4, :) < -5));
    end

    % Check control bounds
    if any(control(1, :) > 1800 | control(1, :) < 0)
        violations.control.Tx = struct( ...
                                       'max', max(control(1, :)), ...
                                       'min', min(control(1, :)), ...
                                       'bounds', [0, 1800], ...
                                       'numViolations', sum(control(1, :) > 1800 | control(1, :) < 0));
    end
    if any(control(2, :) > 2600 | control(2, :) < 0)
        violations.control.Ty = struct( ...
                                       'max', max(control(2, :)), ...
                                       'min', min(control(2, :)), ...
                                       'bounds', [0, 2600], ...
                                       'numViolations', sum(control(2, :) > 2600 | control(2, :) < 0));
    end

    % Check physical consistency
    V = sqrt(state(3, :).^2 + state(4, :).^2);
    gamma = atan2(state(4, :), state(3, :));

    violations.physical.velocity = struct( ...
                                          'max', max(V), ...
                                          'min', min(V), ...
                                          'mean', mean(V));

    violations.physical.flightPathAngle = struct( ...
                                                 'max', max(abs(gamma)) * 180 / pi, ...
                                                 'min', min(gamma) * 180 / pi, ...
                                                 'mean', mean(gamma) * 180 / pi);
end
